<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../dtd/dblite.dtd">
<chapter id="tsvn-introduction">
	<title>Introduction</title>
	<?dbhh topicname="HIDD_ABOUT"?>
	<simplesect>
		<indexterm>
			<primary>version control</primary>
		</indexterm>
		<para>
			Version control is the art of managing changes to
			information. It has long been a critical tool for programmers,
			who typically spend their time making small changes to software
			and then undoing or checking some of those changes the next day.  
			Imagine a team of such developers working concurrently - and perhaps even
			simultaneously on the very same files! - and you can see why
			a good system is needed to <emphasis>manage the potential chaos</emphasis>.
		</para>
	</simplesect>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 1 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-intro-about">
		<title>What is TortoiseGit?</title>
		<para>
			TortoiseGit is a free open-source client for the
			<firstterm>Git</firstterm> version control system.
			That is, TortoiseGit manages files over time.
			Files are stored in a local <firstterm>repository</firstterm>.
			The repository is much like an ordinary file server, except that it
			remembers every change ever made to your files and directories.
			This allows you to recover older versions of your files and examine
			the history of how and when your data changed, and who changed it.
			This is why many people think of Git and version control
			systems in general as a sort of <quote>time machine</quote>.
		</para>
		<para>
			Some version control systems are also software configuration
			management (SCM) systems.  These systems are specifically
			tailored to manage trees of source code, and have many features
			that are specific to software development - such as natively
			understanding programming languages, or supplying tools for
			building software.  Git, however, is not one of these
			systems; it is a general system that can be used to manage
			<emphasis>any</emphasis> collection of files, including
			source code.
		</para>
		<para>
			Git is an <emphasis>open source, distributed version control system</emphasis>
			designed to handle everything from small to very large projects with speed and 
			efficiency. Every Git clone is a full-fledged repository with complete history 
			and full revision tracking capabilities, not dependent on network access or 
			a central server. Branching and merging are fast and easy to do.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 2 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-intro-history">
		<title>TortoiseGit's History</title>
		<para>
			In 2008, Frank Li found that Git was a very good version
			control system, but it lacked a good GUI client. The idea for a
			Git client as a Windows shell integration was inspired by
			the similar client for SVN named TortoiseSVN.
		</para>
		<para>
			Frank studied the source code of TortoiseSVN and used it as a base for
			TortoiseGit. He then started the project, registered the project
			at code.google.com and put the source code online. 
		</para>
		<para>
			As Git became more stable it attracted more and more users
			who also started using TortoiseGit as their Git client.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 3 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-intro-features">
		<title>TortoiseGit's Features</title>
		<para>
			What makes TortoiseGit such a good Git client?
			Here's a short list of features.
		</para>
		<variablelist>
			<varlistentry>
				<term>Shell integration</term>
				<listitem>
					<indexterm>
						<primary>Windows shell</primary>
					</indexterm>
					<indexterm>
						<primary>explorer</primary>
					</indexterm>
					<para>
						TortoiseGit integrates seamlessly into the Windows shell
						(i.e. the explorer). This means you can keep working
						with the tools you're already familiar with. And you
						do not have to change into a different application
						each time you need functions of the version control!
					</para>
					<para>
						And you are not even forced to use the Windows Explorer.
						TortoiseGit's context menus work in many other file managers,
						and in the File/Open dialog which is common to most
						standard Windows applications.
						You should, however, bear in mind that TortoiseGit
						is intentionally developed as extension for the Windows
						Explorer. Thus it is possible that in other applications
						the integration is not as complete and e.g. the icon
						overlays may not be shown.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Icon overlays</term>
				<listitem>
					<para>
						The status of every versioned file and folder is
						indicated by small overlay icons. That way you can see
						right away what the status of your working copy is.
					</para>
					<para>
						The icon overlays are based on TortoiseOverlays (<a href="http://www.tortoisesvn.net">http://www.tortoisesvn.net</a>)
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Easy access to Git commands</term>
				<listitem>
					<para>
						All Git commands are available from the explorer
						context menu. TortoiseGit adds its own submenu there.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Since TortoiseGit is a Git client, we would also like to show you
			some of the features of Git itself:
		</para>
		<variablelist>
			<varlistentry>
				<term>Distributed version control</term>
				<listitem>
					<para>
						 Like most other modern version control systems, Git 
						 gives each developer a local copy of the entire development 
						 history, and changes are copied from one such repository 
						 to another. These changes are imported as additional 
						 development branches, and can be merged in the same way 
						 as a locally developed branch. Repositories can be easily 
						 accessed via the efficient Git protocol (optionally wrapped 
						 in ssh for authentication and security) or simply using 
						 HTTP - you can publish your repository anywhere without 
						 any special webserver configuration required.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Atomic commits</term>
				<listitem>
					<para>
						A commit either goes into the repository completely,
						or not at all. 
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Strong support for non-linear development</term>
				<listitem>
					<para>
						Git supports rapid and convenient branching and merging, 
						and includes powerful tools for visualizing and navigating 
						a non-linear development history.					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Efficient handling of large projects</term>
				<listitem>
					<para>
						Git is very fast and scales well even when working with 
						large projects and long histories. It is commonly an order 
						of magnitude faster than most other version control systems, 
						and several orders of magnitude faster on some operations. 
						It also uses an extremely efficient packed format for long-term 
						revision storage that currently tops any other open source 
						version control system.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Cryptographic authentication of history</term>
				<listitem>
					<para>
						The Git history is stored in such a way that the name of a 
						particular revision (a "commit" in Git terms) depends upon 
						the complete development history leading up to that commit. 
						Once it is published, it is not possible to change the old 
						versions without it being noticed. Also, tags can be 
						cryptographically signed. 
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Efficient branching and tagging</term>
				<listitem>
					<para>
						The cost of branching and tagging need not be
						proportional to the project size. Branch is just head of commits. 
						Tag is friend name of commit hash. 
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Toolkit design</term>
				<listitem>
					<para>
						Following the Unix tradition, Git is a collection of many small 
						tools written in C, and a number of scripts that provide convenient 
						wrappers. Git provides tools for both easy human usage and easy 
						scripting to perform new clever operations.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 4 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-intro-install">
		<title>Installing TortoiseGit</title>
		<sect2>
			<title>System requirements</title>
			<para>
				TortoiseGit runs on Windows XP SP3 or higher.
				Windows 98, Windows ME, Windows NT4 and Windows 2000 are no longer supported.
			</para>
			<para>
				If you encounter any problems during or after installing
				TortoiseGit please refer to
				<xref linkend="tsvn-faq"/>
				first.
			</para>
		</sect2>
		<sect2>
			<title>Installation</title>
			<indexterm>
				<primary>install</primary>
			</indexterm>
			<para>
				TortoiseGit comes with an easy to use installer. Double click on
				the installer file and follow the instructions. The installer
				will take care of the rest. 
			</para>
			<important>
				<para>
					You need Administrator privileges to install TortoiseGit.
				</para>
			</important>
		</sect2>
		<sect2 id="tsvn-intro-install-lang">
			<title>Language Packs</title>
			<indexterm>
				<primary>language packs</primary>
			</indexterm>
			<indexterm>
				<primary>translations</primary>
			</indexterm>
			<para>
				The TortoiseGit user interface has not yet been translated into many
				different languages.
			</para>
<!--
			<para>
				The TortoiseGit user interface has been translated into many
				different languages, so you may be able to download a language
				pack to suit your needs.
				You can find the language packs on our 
				<ulink url="http://TortoiseGit.net/translation_status">
					<citetitle>translation status page</citetitle>
				</ulink>.
				And if there is no language pack available yet, why not join
				the team and submit your own translation ;-)
			</para>
			<para>
				Each language pack is packaged as a <literal>.exe</literal> installer.
				Just run the install program and follow the instructions.
				Next time you restart, the translation will be available.
			</para>
-->
		</sect2>
		<sect2 id="tsvn-intro-instalsl-spell">
			<title>Spellchecker</title>
			<indexterm>
				<primary>spellchecker</primary>
			</indexterm>
			<indexterm>
				<primary>dictionary</primary>
			</indexterm>
			<para>
				TortoiseGit includes a spell checker which allows you to check your
				commit log messages. This is especially useful if the project language
				is not your native language.
				The spell checker uses the same dictionary files as
				<ulink url="http://openoffice.org">
					<citetitle>OpenOffice</citetitle>
				</ulink>
				and 
				<ulink url="http://mozilla.org">
					<citetitle>Mozilla</citetitle>
				</ulink>.
			</para>
			<para>
				The installer automatically adds the US and UK English dictionaries.
<!--
				If you want other languages, the easiest option is simply to
				install one of TortoiseGit's language packs. This will install
				the appropriate dictionary files as well as the TortoiseGit local
				user interface.
				Next time you restart, the dictionary will be available too.
-->
			</para>
			<para>
				Or you can install the dictionaries yourself. If you have OpenOffice or
				Mozilla installed, you can copy those dictionaries, which are located
				in the installation folders for those applications.
				Otherwise, you need to download the required dictionary files from
				<ulink url="http://wiki.services.openoffice.org/wiki/Dictionaries">
					<citetitle>http://wiki.services.openoffice.org/wiki/Dictionaries</citetitle>
				</ulink>
			</para>
			<para>
				Once you have got the dictionary files, you
				probably need to rename them so that the filenames only have
				the locale chars in it.
				Example:
				<itemizedlist>
					<listitem>
						<para>
							<filename>en_US.aff</filename>
						</para>
					</listitem>
					<listitem>
						<para>
							<filename>en_US.dic</filename>
						</para>
					</listitem>
				</itemizedlist>
				Then just copy them to the <filename>bin</filename> sub-folder of
				the TortoiseGit installation folder. Normally this will be
				<filename>C:\Program Files\TortoiseGit\bin</filename>.
				If you don't want to litter the <filename>bin</filename> sub-folder,
				you can instead place your spell checker files in
				<filename>C:\Program Files\TortoiseGit\Languages</filename>. If that folder isn't
				there, you have to create it first.
				The next time you start TortoiseGit, the spell checker will be available.
			</para>
			<para>
				If you install multiple dictionaries, TortoiseGit uses these rules
				to select which one to use.
				<orderedlist>
<!--
					<listitem>
						<para>
						Check the <literal>tsvn:projectlanguage</literal> setting.
						Refer to <xref linkend="tsvn-dug-propertypage"/> for information
						about setting project properties.
						</para>
					</listitem>
-->
					<listitem>
						<para>
						If no project language is set, or that language is not
						installed, try the language corresponding to the Windows locale.
						</para>
					</listitem>
					<listitem>
						<para>
						If the exact Windows locale doesn't work, try the
						<quote>Base</quote> language, eg.
						<literal>de_CH</literal> (Swiss-German) falls back to
						<literal>de_DE</literal> (German).
						</para>
					</listitem>
					<listitem>
						<para>
						If none of the above works, then the default language
						is English, which is included with the standard installation.
						</para>
					</listitem>
				</orderedlist>
			</para>
		</sect2>
	</sect1>
</chapter>
<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
